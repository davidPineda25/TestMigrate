// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.Infrastructure.Migrations;

#nullable disable

namespace Test.Infrastructure.Migrations
{
    [DbContext(typeof(TestMigrateDbContext))]
    [Migration("20240212081234_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Test.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategory");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Test.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerIdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductIdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdComment");

                    b.HasIndex("CustomerIdCustomer");

                    b.HasIndex("ProductIdProduct");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Test.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCustomer");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Test.Domain.Entities.DetailOrder", b =>
                {
                    b.Property<Guid>("IdDetailOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ammount")
                        .HasColumnType("int");

                    b.Property<Guid>("IdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderIdOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductIdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetailOrder");

                    b.HasIndex("OrderIdOrder");

                    b.HasIndex("ProductIdProduct");

                    b.ToTable("DetailOrder");
                });

            modelBuilder.Entity("Test.Domain.Entities.DetailOrderCustomer", b =>
                {
                    b.Property<Guid>("IdDetailOrderCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerIdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrder")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdDetailOrderCustomer");

                    b.HasIndex("CustomerIdCustomer");

                    b.HasIndex("IdOrder");

                    b.ToTable("DetailOrderCustomer");
                });

            modelBuilder.Entity("Test.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerIdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdOrder");

                    b.HasIndex("CustomerIdCustomer");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Test.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProduct");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Test.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Test.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerIdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductIdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Test.Domain.Entities.DetailOrder", b =>
                {
                    b.HasOne("Test.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderIdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductIdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Test.Domain.Entities.DetailOrderCustomer", b =>
                {
                    b.HasOne("Test.Domain.Entities.Customer", "Customer")
                        .WithMany("DetailOrderClient")
                        .HasForeignKey("CustomerIdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Domain.Entities.Order", "Order")
                        .WithMany("DetailOrderClient")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Test.Domain.Entities.Order", b =>
                {
                    b.HasOne("Test.Domain.Entities.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerIdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Test.Domain.Entities.Product", b =>
                {
                    b.HasOne("Test.Domain.Entities.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Test.Domain.Entities.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Test.Domain.Entities.Customer", b =>
                {
                    b.Navigation("DetailOrderClient");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Test.Domain.Entities.Order", b =>
                {
                    b.Navigation("DetailOrderClient");
                });
#pragma warning restore 612, 618
        }
    }
}
